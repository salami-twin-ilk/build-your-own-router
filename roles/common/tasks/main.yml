
- name: "Create local unprivileged users"
  user:
    name: "{{ item.username }}"
    comment: "{{ item.comment }}"
    shell: "{{ item.shell }}"
    createhome: "{{ item.createhome }}"
    system: no
    state: present
  with_items: "{{ users_unprivileged }}"

- name: "Add privileged users to the sudo group"
  user:
    name: "{{ item }}"
    groups: sudo
    append: yes
  with_items: "{{ users_sudo }}"

- name: "Copy /etc/network/interfaces"
  copy:
    src: "etc/network/interfaces"
    dest: "/etc/network/interfaces"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/apt/apt.conf.d/02install-recommends"
  template:
    src: "etc/apt/apt.conf.d/02install-recommends.jinja2"
    dest: "/etc/apt/apt.conf.d/02install-recommends"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/apt/apt.conf.d/02install-suggests"
  template:
    src: "etc/apt/apt.conf.d/02install-suggests.jinja2"
    dest: "/etc/apt/apt.conf.d/02install-suggests"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/apt/apt.conf.d/02periodic"
  template:
    src: "etc/apt/apt.conf.d/02periodic.jinja2"
    dest: "/etc/apt/apt.conf.d/02periodic"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/apt/sources.list"
  template:
    src: "etc/apt/sources.list.jinja2"
    dest: "/etc/apt/sources.list"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Update apt cache and perform dist-upgrade"
  apt:
    upgrade: dist
    update_cache: yes

- name: "Install additional packages"
  apt:
    name: "{{ apt_packages_add }}"
    state: present

- name: "Remove unneeded packages"
  apt:
    name: "{{ apt_packages_remove }}"
    state: absent
    purge: yes

- name: "Install templated /etc/default/grub"
  template:
    src: "etc/default/grub.jinja2"
    dest: "/etc/default/grub"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/initramfs-tools/initramfs.conf"
  template:
    src: "etc/initramfs-tools/initramfs.conf.jinja2"
    dest: "/etc/initramfs-tools/initramfs.conf"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Update GRUB to reflect changes to configuration"
  shell: "update-grub"

- name: "Install templated config files for physical network interfaces"
  template:
    src: "etc/network/interfaces.d/template.jinja2"
    dest: "/etc/network/interfaces.d/10-{{ item.name }}"
    owner: root
    group: root
    mode: 0644
    backup: no
  with_items: "{{ physical_ethernet_interfaces }}"

- name: "Install templated /etc/ssh/sshd_config"
  template:
    src: "etc/ssh/sshd_config.jinja2"
    dest: "/etc/ssh/sshd_config"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Create the ssh-users group"
  group:
    name: "ssh-users"
    state: present

- name: "Add users to the ssh-users group"
  user:
    name: "{{ item }}"
    groups: ssh-users
    append: yes
  with_items: "{{ users_ssh }}"

- name: "Install templated /etc/hostname"
  template:
    src: "etc/hostname.jinja2"
    dest: "/etc/hostname"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/hosts"
  template:
    src: "etc/hosts.jinja2"
    dest: "/etc/hosts"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/issue"
  template:
    src: "etc/issue.jinja2"
    dest: "/etc/issue"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/issue.net"
  template:
    src: "etc/issue.net.jinja2"
    dest: "/etc/issue.net"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Install templated /etc/logrotate.conf"
  template:
    src: "etc/logrotate.conf.jinja2"
    dest: "/etc/logrotate.conf"
    owner: root
    group: root
    mode: 0644
    backup: no

- name: "Enable services"
  systemd:
    enabled: yes
    name: "{{ item }}"
  with_items: "{{ services_enable }}"

- name: "Restart services"
  systemd:
    daemon_reload: yes
    state: restarted
    name: "{{ item }}"
  with_items: "{{ services_restart }}"

